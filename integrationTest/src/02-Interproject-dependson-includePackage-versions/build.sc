import java.io.IOException
import java.util.zip.ZipFile

import scala.io.Source

import mill._
import mill.scalalib._
// plugin-specific imports, generated by integration test infra
import $exec.plugin
import de.tobiasroeser.mill.osgi._

val projVersion = "1.0.0"

def _verify() = T.command {

  val newLine = System.getProperty("line.separator")

  {
    val file = proj1.osgiBundle().path.toIO
    val zipFile = new ZipFile(file)

    // Verify manifest
    // in essence, we make sure package proj1 gets exported with a version
    val manifestIn = zipFile.getInputStream(zipFile.getEntry("META-INF/MANIFEST.MF"))
    try {
      val lines = Source.fromInputStream(manifestIn).getLines().toList
      val allLines = lines.mkString(newLine)
      val butWas = newLine + "But was:" + newLine + allLines

      val export = Seq("Export-Package: ", "proj1;", s"""version="${projVersion}"""")

      if (!(lines.exists(l => export.forall(s => l.containsSlice(s))))) {
        sys.error(s"""Expected ${export.mkString("'", "' and '", "'")} in manifest!""" + butWas)
      }
    } catch {
      case e: IOException => sys.error("Expected to be able to read the manifest, but got exception!" + newLine + e)
    } finally manifestIn.close()
  }

  {
    val file = proj1.osgiBundle().path.toIO
    val zipFile = new ZipFile(file)

    // Verify manifest
    // in essence, we make sure, package proj2 gets imported with a proper version range
    // in sbt-osgi <= 0.9.4, the version range was missing
    val manifestIn = zipFile.getInputStream(zipFile.getEntry("META-INF/MANIFEST.MF"))
    try {
      val lines = Source.fromInputStream(manifestIn).getLines().toList
      val allLines = lines.mkString(newLine)
      val butWas = newLine + "But was:" + newLine + allLines

      val rangeFrom = projVersion.split("[.]").take(2).mkString(".")
      val rangeTo = projVersion.split("[.]").head.toInt + 1
      val expected = Seq("Import-Package: ", s"""proj1;version="[${rangeFrom},${rangeTo})"""")

      if (!(lines.exists(l => expected.forall(s => l.containsSlice(s))))) {
        sys.error(s"""Expected ${expected.mkString("'", "' and '", "'")} in manifest!""" + butWas)
      }
    } catch {
      case e: IOException => sys.error("Expected to be able to read the manifest, but got exception!" + newLine + e)
    } finally manifestIn.close()
  }


}


object proj1 extends ScalaModule with OsgiBundleModule {
  override def scalaVersion: T[String] = "2.12.7"
  override def bundleVersion = projVersion
  override def osgiHeaders = super.osgiHeaders().copy(
    `Export-Package` = Seq("proj1")
  )
}

object proj2 extends ScalaModule with OsgiBundleModule {
  override def scalaVersion: T[String] = "2.12.7"
  override def bundleVersion = projVersion
  override def osgiHeaders = super.osgiHeaders().copy(
    `Export-Package` = Seq("proj2")
  )
  override def moduleDeps = Seq(proj1)
}
