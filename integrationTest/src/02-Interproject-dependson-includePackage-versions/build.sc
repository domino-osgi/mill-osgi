import java.io.IOException
import java.util.jar.Manifest
import java.util.zip.ZipFile

import ammonite.ops.Path
import mill._
import mill.scalalib._

// plugin-specific imports, generated by integration test infra
import $exec.plugin
import de.tobiasroeser.mill.osgi._

val projVersion = "1.0.0"

def withManifest(file: Path)(f: Manifest => Unit) = {
  val zipFile = new ZipFile(file.toIO)
  val manifestIn = zipFile.getInputStream(zipFile.getEntry("META-INF/MANIFEST.MF"))
  try {
    val manifest = new Manifest(manifestIn)
    f(manifest)
  } catch {
    case e: IOException => throw new AssertionError(s"Could not read manifest of file ${file}", e)
  } finally {
    manifestIn.close()
  }
}

def check(manifest: Manifest, header: String, expectedSlices: Seq[String]) = {
  val value = manifest.getMainAttributes().getValue(header)
  if (!expectedSlices.forall(s => value.containsSlice(s))) {
    sys.error(s"""Expected '${header}' header with ${expectedSlices.mkString("'", "' and '", "'")}! But was '${value}'""")
  }
}

def _verify() = T.command {

  withManifest(proj1.jar().path) { manifest =>
    check(manifest, "Export-Package", Seq("proj1;", s"""version="${projVersion}""""))
  }

  withManifest(proj2.jar().path) { manifest =>
    check(manifest, "Export-Package", Seq("proj2;", s"""version="${projVersion}""""))

    val rangeFrom = projVersion.split("[.]").take(2).mkString(".")
    val rangeTo = projVersion.split("[.]").head.toInt + 1
    check(manifest, "Import-Package", Seq(s"""proj1;version="[${rangeFrom},${rangeTo})""""))
  }

}

object proj1 extends ScalaModule with OsgiBundleModule {
  override def scalaVersion: T[String] = "2.12.7"

  override def bundleVersion = projVersion

  override def osgiHeaders = super.osgiHeaders().copy(
    `Export-Package` = Seq("proj1")
  )
}

object proj2 extends ScalaModule with OsgiBundleModule {
  override def scalaVersion: T[String] = "2.12.7"

  override def bundleVersion = projVersion

  override def osgiHeaders = super.osgiHeaders().copy(
    `Export-Package` = Seq("proj2")
  )

  override def moduleDeps = Seq(proj1)
}
